1.
a) // crear bd:
CREATE DATABASE "Prueba"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;

//crear tablas: 
CREATE TABLE public."Extensiones"
(
    "NumeroExtensiones" bigint NOT NULL,
    "NombreUsuario" text NOT NULL,
    PRIMARY KEY ("NumeroExtensiones")
);

CREATE TABLE public."Servicios"
(
    "TipoServicio" bigint NOT NULL,
    "DescripcionServicio" text NOT NULL,
    PRIMARY KEY ("TipoServicio")
);
CREATE TABLE public."Llamadas"
(
    "Id" bigint NOT NULL,
    "FechaHoraLlamada" date NOT NULL,
    "NumeroExtension" bigint NOT NULL,
    "NumeroMarcado" bigint NOT NULL,
    "DuracionLlamada" bigint NOT NULL,
    "CostoLlamada" bigint NOT NULL,
    "TipoServicio" bigint NOT NULL,
    PRIMARY KEY ("Id")
CONSTRAINT "fk_NumeroExtension" FOREIGN KEY ("NumeroExtension")
        REFERENCES public."Extensiones" ("NumeroExtensiones") MATCH SIMPLE

ALTER TABLE IF EXISTS public."Llamadas"
    ADD CONSTRAINT "fk_TipoServicio" FOREIGN KEY ("TipoServicio")
    REFERENCES public."Servicios" ("TipoServicio") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

//Insertar datos a las tablas

INSERT INTO public."Servicios"(
	"TipoServicio", "DescripcionServicio")
	VALUES (1, 'Llamada Local');

INSERT INTO public."Servicios"(
	"TipoServicio", "DescripcionServicio")
	VALUES (2, 'Llamada Nacional');

INSERT INTO public."Servicios"(
	"TipoServicio", "DescripcionServicio")
	VALUES (3, 'Llamada Internacional');

INSERT INTO public."Servicios"(
	"TipoServicio", "DescripcionServicio")
	VALUES (4, 'Llamada Celular');

INSERT INTO public."Extensiones"(
	"NumeroExtensiones", "NombreUsuario")
	VALUES (5749411, 'Maria Trinidad Chica Uribe');

INSERT INTO public."Extensiones"(
	"NumeroExtensiones", "NombreUsuario")
	VALUES (5749412, 'Julio Cesar Gomez Gil');

INSERT INTO public."Extensiones"(
	"NumeroExtensiones", "NombreUsuario")
	VALUES (5749413, 'Maryori Jimenez Jimenez');

INSERT INTO public."Extensiones"(
	"NumeroExtensiones", "NombreUsuario")
	VALUES (5749414, 'Ruby Alexandra Hinestroza Garcia');

INSERT INTO public."Extensiones"(
	"NumeroExtensiones", "NombreUsuario")
	VALUES (5749415, 'Johan Alejandro Ramirez Caicedo');

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (1, '21-11-2021', 5749411, 3118911780, 185, 200, 4);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (2, '21-11-2021', 5749412, 6012739400, 240,  0, 1);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (3, '21-11-2021', 5749411, 6045441257, 120, 160, 2);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (4, '21-11-2021', 5749413, 3002458798, 245, 250, 4);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (5, '21-11-2021', 5749414, 12053568978, 170, 300, 3);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (6, '21-11-2021', 5749413, 6087845923, 45, 80, 2);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (7, '21-11-2021', 5749414, 6023567841, 93, 160, 2);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (8, '21-11-2021', 5749413, 13052564578, 240, 400, 3);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (9, '21-11-2021', 5749415, 3204785210, 45, 50, 4);

INSERT INTO public."Llamadas"(
	"Id", "FechaHoraLlamada", "NumeroExtension", "NumeroMarcado", "DuracionLlamada", "CostoLlamada", "TipoServicio")
	VALUES (10, '21-11-2021', 5749415, 6012784125, 0, 0, 1);

//vista
a)CREATE OR REPLACE VIEW vista_combinada AS
SELECT
    L.Id,
    L.FechaHoraLlamada,
    L.NumeroMarcado,
    L.DuracionLlamada,
    L.CostoLlamada,
    E.NumeroExtension,
    E.NombreUsuario,
    S.TipoServicio,
    S.DescripcionServicio
FROM "Llamadas" L
JOIN "Extensiones" E ON L."NumeroExtension" = E."NumeroExtension"
JOIN "Servicios" S ON L."TipoServicio" = S."TipoServicio";


b)

-SELECT
    vista_combinada.NombreUsuario AS Usuario,
    COUNT(*) AS NumeroDeLlamadas,
    SUM(vista_combinada.DuracionLlamada) AS DuracionTotal,
    SUM(vista_combinada.CostoLlamada) AS CostoTotal
FROM vista_combinada
GROUP BY vista_combinada.NombreUsuario;


-SELECT
    Id,
    FechaHoraLlamada,
    NumeroMarcado,
    DuracionLlamada
FROM vista_combinada
ORDER BY DuracionLlamada DESC
LIMIT 10;


-SELECT
    Id,
    FechaHoraLlamada,
    NumeroMarcado,
    DuracionLlamada
FROM vista_combinada
ORDER BY CostoLlamada DESC
LIMIT 10;


-SELECT
    vista_combinada.TipoServicio AS TipoDeServicio,
    COUNT(*) AS NumeroDeLlamadas,
    SUM(vista_combinada.CostoLlamada) AS CostoTotal
FROM vista_combinada
GROUP BY vista_combinada.TipoServicio;

Parte teorica:
a. los términos reservados async y await están relacionados con la programación asincrónica, que permite escribir código que no bloquea el hilo principal de ejecución, lo que es útil en situaciones donde se realizan operaciones que pueden llevar tiempo, como solicitudes a bases de datos o llamadas a servicios web. 
async se usa como modificador en una declaración de método para indicar que el método es asincrónico. Un método marcado como async puede contener operaciones asincrónicas y utilizar la palabra clave await para esperar a que esas operaciones se completen sin bloquear el hilo principal.

async Task MiMetodoAsincronico()
{
    // Operaciones asincrónicas aquí
}

await se usa dentro de un método async para indicar que se debe esperar a que una operación asincrónica se complete antes de continuar con la ejecución del código que sigue.

async Task MiMetodoAsincronico()
{
    // Realiza una operación asincrónica
    await OperacionAsincronica();
    
    // El código que sigue se ejecutará después de que la operación asincrónica termine.
}

b. GET (Obtener):

El método GET se utiliza para recuperar información de un recurso de la API. Cuando se realiza una solicitud GET a una URL específica, se espera que la API devuelva datos relacionados con ese recurso, generalmente en formato JSON, XML u otro formato de datos. Las solicitudes GET no deben tener un impacto en los datos ni causar cambios en el servidor; son idempotentes, lo que significa que realizar la misma solicitud GET varias veces no debería cambiar el estado del servidor ni causar efectos secundarios.

POST (Crear):

El método POST se utiliza para crear un nuevo recurso en la API. Al realizar una solicitud POST a una URL, se envían datos que describen el nuevo recurso que se debe crear. La API procesa estos datos y crea un nuevo recurso en el servidor. Las solicitudes POST pueden tener efectos secundarios, como la creación de nuevos registros en una base de datos.

PUT (Actualizar):

El método PUT se utiliza para actualizar un recurso existente en la API. Al realizar una solicitud PUT a una URL específica, se envían datos que describen la versión actualizada del recurso. La API debe usar estos datos para actualizar el recurso existente o crearlo si no existe. Las solicitudes PUT son idempotentes, lo que significa que realizar la misma solicitud PUT varias veces con los mismos datos no debe cambiar el estado más allá de la primera actualización.

DELETE (Eliminar):

El método DELETE se utiliza para eliminar un recurso específico de la API. Al realizar una solicitud DELETE a una URL, se espera que la API elimine el recurso relacionado con esa URL. Las solicitudes DELETE tienen el efecto de eliminar datos o recursos, por lo que deben utilizarse con precaución.


c). Git es un sistema de control de versiones distribuido que permite realizar un seguimiento de las versiones de archivos y proyectos de software, lo que facilita el trabajo colaborativo y el control de cambios.

GitHub es una plataforma de alojamiento en la nube para proyectos de desarrollo de software que utilizan Git como sistema de control de versiones. GitHub proporciona servicios que permiten a los desarrolladores colaborar en proyectos, compartir código, realizar seguimiento de problemas y administrar proyectos de software.


